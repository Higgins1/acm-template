struct node
{
	int d,u;
	bool operator < (const node& a) const{
		return d>a.d;
	}
};

struct Dijkstra
{
	int n,m;
	vector<Edge> edges;
	vector<int> G[maxn];
	bool done[maxn];
	int d[maxn];
	int p[maxn];

	void init(int n){
		this->n=n;
		for (int i=0; i<n; i++) G[i].clear();
		edges.clear();
	}

	void Addedges(int from, int to, int dist) {
		edges.push_back((Edge){from,to,dist});
		m=edges.size();
		G[from].push_back(m-1);
	}

	void dijkstra(int s)
	{
		priority_queue<node> q;
		for (int i=0; i<n; i++) d[i]=INF;
		d[s]=0;
		memset(done,0,sizeof(done));
		q.push((node){0,s});
		while (!q.empty())
		{
			node x=q.top(); q.pop();
			int u=x.u;
			if (done[u]) continue;
			done[u]=true;
			for (int i=0; i<G[u].size(); i++){
				Edge& e=edges[G[u][i]];
				if (d[e.to]>d[u]+e.dist){
					d[e.to]=d[u]
					+e.dist;
					p[e.to]=G[u][i];
					q.push((node){d[e.to],e.to});
				}
			}
		}
	}	
};
